!function(){"use strict";function b(o,t,e,r,a,i,l,s,n){o.beginPath(),o.fillStyle=n;var u=function(o,t,e,r,a,i,l){for(var s=0,n=1e3,u=0;u<1;u+=.001){var c=C(o,t,e,r,a,i,u),d=(g=o,f=t,y=c.x,x=c.y,Math.sqrt((y-g)*(y-g)+(x-f)*(x-f)));Math.abs(d-l)<n&&(n=Math.abs(d-l),s=u)}var g,f,y,x;return C(o,t,e,r,a,i,s)}(t,e,r.x,r.y,a,i,l);o.arc(u.x,u.y,3*s,0,2*Math.PI,!1),o.fill()}function s(o,t,e,r){var a=1-o;return a*a*t+2*a*o*e+o*o*r}function C(o,t,e,r,a,i,l){return{x:s(l,o,e,a),y:s(l,t,r,i)}}sigma.utils.pkg("sigma.canvas.edges"),sigma.canvas.edges.dotCurve=function(o,t,e,r,a){var i,l,s=o.color,n=a("prefix")||"",u=o[n+"size"]||1,c=a("edgeColor"),d=a("defaultNodeColor"),g=a("defaultEdgeColor"),f=t[n+"size"],y=t[n+"x"],x=t[n+"y"],C=e[n+"x"],h=e[n+"y"],v=t.id===e.id?sigma.utils.getSelfLoopControlPoints(y,x,f):sigma.utils.getQuadraticControlPoint(y,x,C,h);if(!s)switch(c){case"source":s=t.color||d;break;case"target":s=e.color||d;break;default:s=g}r.strokeStyle=s,r.lineWidth=u,r.beginPath(),r.moveTo(y,x),t.id===e.id?r.bezierCurveTo(v.x1,v.y1,v.x2,v.y2,C,h):r.quadraticCurveTo(v.x,v.y,C,h),r.stroke(),null==o.sourceDotColor&&null==o.targetDotColor||(i=o.dotOffset||3,l=o.dotSize||1,l*=u,i*=f,null!=o.sourceDotColor&&b(r,y,x,v,C,h,i,l,o.sourceDotColor),null!=o.targetDotColor&&b(r,C,h,v,y,x,i,l,o.targetDotColor))}}(),function(){"use strict";function S(o,t,e,r,a,i,l,s,n){o.beginPath(),o.fillStyle=n;var u=function(o,t,e,r,a,i,l){for(var s=0,n=1e3,u=0;u<1;u+=.001){var c=C(o,t,e,r,a,i,u),d=(g=o,f=t,y=c.x,x=c.y,Math.sqrt((y-g)*(y-g)+(x-f)*(x-f)));Math.abs(d-l)<n&&(n=Math.abs(d-l),s=u)}var g,f,y,x;return C(o,t,e,r,a,i,s)}(t,e,r.x,r.y,a,i,l);o.arc(u.x,u.y,3*s,0,2*Math.PI,!1),o.fill()}function s(o,t,e,r){var a=1-o;return a*a*t+2*a*o*e+o*o*r}function C(o,t,e,r,a,i,l){return{x:s(l,o,e,a),y:s(l,t,r,i)}}sigma.utils.pkg("sigma.canvas.edges"),sigma.canvas.edges.dotCurvedArrow=function(o,t,e,r,a){var i,l,s,n,u,c,d=o.color,g=a("prefix")||"",f=a("edgeColor"),y=a("defaultNodeColor"),x=a("defaultEdgeColor"),C=o[g+"size"]||1,h=o.count||0,v=e[g+"size"],b=t[g+"x"],m=t[g+"y"],M=e[g+"x"],D=e[g+"y"],P=Math.max(2.5*C,a("minArrowSize")),k=t.id===e.id?sigma.utils.getSelfLoopControlPoints(b,m,v,h):sigma.utils.getQuadraticControlPoint(b,m,M,D,h),p=t.id===e.id?(i=Math.sqrt(Math.pow(M-k.x1,2)+Math.pow(D-k.y1,2)),l=k.x1+(M-k.x1)*(i-P-v)/i,s=k.y1+(D-k.y1)*(i-P-v)/i,n=(M-k.x1)*P/i,(D-k.y1)*P/i):(i=Math.sqrt(Math.pow(M-k.x,2)+Math.pow(D-k.y,2)),l=k.x+(M-k.x)*(i-P-v)/i,s=k.y+(D-k.y)*(i-P-v)/i,n=(M-k.x)*P/i,(D-k.y)*P/i);if(!d)switch(f){case"source":d=t.color||y;break;case"target":d=e.color||y;break;default:d=x}r.strokeStyle=d,r.lineWidth=C,r.beginPath(),r.moveTo(b,m),t.id===e.id?r.bezierCurveTo(k.x2,k.y2,k.x1,k.y1,l,s):r.quadraticCurveTo(k.x,k.y,l,s),r.stroke(),r.fillStyle=d,r.beginPath(),r.moveTo(l+n,s+p),r.lineTo(l+.6*p,s-.6*n),r.lineTo(l-.6*p,s+.6*n),r.lineTo(l+n,s+p),r.closePath(),r.fill(),null==o.sourceDotColor&&null==o.targetDotColor||(u=o.dotOffset||3,c=o.dotSize||1,c*=C,u*=v,null!=o.sourceDotColor&&S(r,b,m,k,M,D,u,c,o.sourceDotColor),null!=o.targetDotColor&&S(r,M,D,k,b,m,u,c,o.targetDotColor))}}();